---
export interface Props {
  tag?:
    | "a"
    | "p"
    | "em"
    | "span"
    | "small"
    | "strong"
    | "blockquote"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"; // Defines allowed HTML tags
  id?: string; // Optional 'id' attribute
  href?: string; // Optional 'href' attribute for anchor tags
  class?: string; // Optional prop for additional custom classes
  variant?: string; // Specifies the style variant of the text
  style?: string; // Specifies inline styles
  title?: string; // Optional title attribute for anchor tags
}

// Define text styles for each variant
const textStyles: Record<string, string> = {
  display6XL:
    "text-5xl leading-tight tracking-tight sm:text-8xl md:text-[10rem] lg:text-[13rem]",
  display5XL:
    "text-5xl leading-tight tracking-tight sm:text-8xl md:text-9xl lg:text-[12rem]",
  display4XL:
    "text-5xl leading-tight tracking-tight sm:text-8xl md:text-9xl lg:text-10xl",
  display3XL:
    "text-5xl leading-tight tracking-tight sm:text-7xl md:text-8xl lg:text-9xl",
  display2XL:
    "text-6xl leading-tight tracking-tight sm:text-6xl md:text-7xl lg:text-8xl",
  displayXL:
    "text-4xl leading-tight tracking-tight sm:text-4xl md:text-5xl lg:text-6xl",
  displayLG:
    "text-4xl leading-tight tracking-tight sm:text-4xl md:text-5xl lg:text-6xl",
  displayMD:
    "text-3xl leading-tight tracking-tight sm:text-3xl md:text-4xl lg:text-5xl",
  displaySM: "text-xl leading-tight sm:text-2xl md:text-3xl lg:text-4xl",
  displayXS: "text-lg leading-tight sm:text-xl md:text-2xl lg:text-3xl",
  textXL: "text-lg sm:text-xl md:text-2xl",
  textLG: "text-lg sm:text-xl md:text-2xl ",
  textBase: "text-lg",
  textSM: "text-base ",
  textXS: "text-sm ",
};

// Destructure props with default values
const {
  tag = "p", // Defaults to paragraph tag
  variant = "textBase", // Defaults to textMD style variant
  class: className = "", // No additional classes by default
  ...props // Collect remaining props
} = Astro.props;

const Tag = tag;

// Get the base classes for the specified variant
const baseClasses = textStyles[variant] || textStyles.textBase; // Fallback to textMD if variant not found

// Ensure link styling takes precedence by putting it at the front
const linkClasses = tag === "a" ? "text-[#2c4863] underline hover:text-black dark:hover:text-white" : "";

// Put linkClasses first to ensure it takes precedence
const combinedClasses = `${linkClasses} ${baseClasses} ${className}`.trim();
---

<Tag
  class:list={[combinedClasses]}
  {...props}
>
  <slot name="left-icon" />
  <slot />
  <slot name="right-icon" />
</Tag>
