---
import Text from "@/components/fundations/elements/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import { getCollection } from 'astro:content';
import { marked } from 'marked';

try {
  const sections = await getCollection('homeSections');
  var heroSection = sections.find(section => section.data.section === "hero");
  var aboutSection = sections.find(section => section.data.section === "about");
  var workSection = sections.find(section => section.data.section === "work");
  var nowSection = sections.find(section => section.data.section === "now");
} catch (error) {
  console.error('Error loading content:', error);
  var heroSection = null;
  var aboutSection = null;
  var workSection = null;
  var nowSection = null;
}

const heroLines = heroSection?.body?.trim()?.split('\n') || ['Welcome to my site'];
const processRichText = (content: string | undefined): string[] => {
  if (!content) return [];
  return content.trim().split('\n\n').filter(Boolean).map(paragraph => {
    // Process markdown links and return HTML
    return marked.parseInline(paragraph);
  });
};
const aboutContent = processRichText(aboutSection?.body);
const workContent = processRichText(workSection?.body);
const nowContent = processRichText(nowSection?.body);
---

<script>
  // Intersection Observer for triggering animations
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-in');
        // Trigger hero image animation when text starts
        if (entry.target.classList.contains('hero-slide-in')) {
          const heroImage = document.getElementById('hero-image');
          if (heroImage) {
            heroImage.classList.add('hero-image-animate');
          }
        }
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe all sections with animation classes
  document.querySelectorAll('.animate-on-scroll').forEach((element) => {
    observer.observe(element);
  });

  // Separate parallax scroll for hero image (only after initial animation)
  let ticking = false;
  let parallaxEnabled = false;

  function updateParallax() {
    const heroImage = document.getElementById('hero-image');
    if (heroImage && parallaxEnabled && heroImage.classList.contains('hero-image-animate')) {
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.15;
      heroImage.style.transform = `translateY(${rate}px) scale(1)`;
      heroImage.classList.add('parallax-active');
    }
    ticking = false;
  }

  function requestTick() {
    if (!ticking && !window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      requestAnimationFrame(updateParallax);
      ticking = true;
    }
  }

  // Enable parallax after initial animations complete
  setTimeout(() => {
    parallaxEnabled = true;
    window.addEventListener('scroll', requestTick);
  }, 3500); // After hero animations finish

  // Page load animation trigger
  function triggerHeroAnimations() {
    const heroText = document.querySelector('.hero-slide-in');
    const heroImage = document.getElementById('hero-image');

    if (heroText && heroImage) {
      const heroRect = heroText.getBoundingClientRect();
      const isInViewport = heroRect.top < window.innerHeight && heroRect.bottom > 0;

      if (isInViewport) {
        heroText.classList.add('animate-in');
        heroImage.classList.add('hero-image-animate');
      }
    }
  }

  window.addEventListener('DOMContentLoaded', triggerHeroAnimations);
</script>

<style>
  /* CSS Custom Properties for coordinated timing */
  :root {
    --hero-duration: 2.5s;
    --hero-delay: 0.8s;
    --hero-easing: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Text Animation */
  .hero-slide-in {
    opacity: 0;
    transform: translateX(-30px);
    transition: opacity var(--hero-duration) var(--hero-easing),
                transform var(--hero-duration) var(--hero-easing);
  }

  .hero-slide-in.animate-in {
    opacity: 1;
    transform: translateX(0);
  }

  /* Hero Image Animation */
  .hero-bg {
    background-image:
      linear-gradient(rgba(48, 104, 151, 0.5), rgba(48, 104, 151, 0.5)),
      url('/images/portrait.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0;
    transform: scale(1.05);
    transition: opacity var(--hero-duration) var(--hero-easing) var(--hero-delay),
                transform var(--hero-duration) var(--hero-easing) var(--hero-delay);
    will-change: transform, opacity;
  }

  .hero-bg.hero-image-animate {
    opacity: 0.5;
    transform: scale(1);
  }

  /* Separate class for parallax to avoid conflicts */
  .hero-bg.parallax-active {
    transition: none;
  }

  /* Mobile-first background approach */
  @media (max-width: 767px) {
    .hero-bg {
      background-size: cover;
      background-position: center top;
    }
  }

  /* Tablet and up - positioned background */
  @media (min-width: 768px) {
    .hero-bg {
      background-size: 70%;
      background-position: center;
    }

    .hero-slide-in {
      font-size: 2.75rem !important; /* slightly smaller than text-5xl for desktop */
    }
  }

  /* Mobile heading sizes - NUCLEAR APPROACH */
  @media (max-width: 767px) {
    .hero-slide-in {
      font-size: 1.75rem !important; /* slightly smaller than text-3xl */
    }

    /* FORCE mobile section headings to be larger - NO EXCUSES */
    .section-heading {
      font-size: 1.5rem !important; /* 24px - DEFINITELY larger than 18px body */
    }
  }

  /* Accessibility: Disable animations for users who prefer reduced motion */
  @media (prefers-reduced-motion: reduce) {
    :root {
      --hero-duration: 0.01s;
      --hero-delay: 0s;
    }

    .hero-slide-in,
    .hero-bg {
      transition: none;
    }

    .hero-bg {
      opacity: 1;
      transform: scale(1);
    }

    .hero-slide-in {
      opacity: 1;
      transform: translateX(0);
    }
  }

</style>

<section class="hero-section mt-12 md:mt-16 lg:mt-20 mb-8 md:mb-12 lg:mb-16">
  <Wrapper variant="wide" class="min-h-[60vh] md:min-h-[70vh] lg:min-h-[80vh] py-8 md:py-12 lg:py-16 xl:py-24 relative px-6 md:px-8">
    <div class="flex items-center h-full">
      <div class="w-full md:w-5/6 lg:w-[65%] z-10 relative px-4 md:px-0">
        <Text
          tag="h1"
          variant="displayXS"
          class="font-medium font-hero animate-on-scroll hero-slide-in"
          style="line-height: 1.3;"
          set:html={heroLines.join('<br />')}
        />
      </div>
    </div>
    <div class="absolute top-0 left-0 md:right-0 md:left-auto w-full md:w-2/5 lg:w-3/5 h-full hero-bg" id="hero-image"></div>
  </Wrapper>
  <Wrapper variant="standard" class="py-8 md:py-12 lg:py-16 xl:py-24 max-w-4xl">
    <div class="animate-on-scroll">
      <Text
        tag="h1"
        variant="displayXS"
        class="font-medium mb-4 section-heading"
      >
        {aboutSection?.data.title}
      </Text>
      <div class="border-t dark:border-white/10 border-black/10 pt-2">
        <div class="ml-0 md:ml-12 lg:ml-24">
          {aboutContent.map((paragraph: string) => (
            <Text
              tag="p"
              variant="textBase"
              class="mt-4"
              set:html={paragraph}
            />
          ))}
        </div>
      </div>
    </div>

    <div class="animate-on-scroll delay-200 mt-24 md:mt-32 lg:mt-48">
      <Text
        tag="h1"
        variant="displayXS"
        class="font-medium mb-4 section-heading"
      >
        {workSection?.data.title}
      </Text>
      <div class="border-t dark:border-white/10 border-black/10 pt-2">
        <div class="ml-0 md:ml-12 lg:ml-24">
          {workContent.map((paragraph: string) => (
            <Text
              tag="p"
              variant="textBase"
              class="mt-4"
              set:html={paragraph}
            />
          ))}
        </div>
      </div>
    </div>

    <div class="animate-on-scroll delay-400 mt-24 md:mt-32 lg:mt-48">
      <Text
        tag="h1"
        variant="displayXS"
        class="font-medium mb-4 section-heading"
      >
        {nowSection?.data.title}
      </Text>
      <div class="border-t dark:border-white/10 border-black/10 pt-2">
        <div class="ml-0 md:ml-12 lg:ml-24">
          {nowContent.map((paragraph: string) => (
            <Text
              tag="p"
              variant="textBase"
              class="mt-4"
              set:html={paragraph}
            />
          ))}
        </div>
      </div>
    </div>
  </Wrapper>
</section>
